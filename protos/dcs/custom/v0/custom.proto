syntax = "proto3";
package dcs.custom.v0;
import "dcs/common/v0/common.proto";

// The Custom service is for APIs that do not map to the "standard library" of
// DCS APIs provided by Eagle Dynamics.
//
// Expect to find APIs here that may be useful for mission frameworks etc.
service CustomService {
  // DCT Function
  rpc RequestMissionAssignment(RequestMissionAssignmentRequest)
      returns (RequestMissionAssignmentResponse) {}

  // DCT Function
  rpc JoinMission(JoinMissionRequest) returns (JoinMissionResponse) {}

  // Evaluate some Lua inside of the mission and return the result as a JSON
  // string. Disabled by default.
  rpc Eval(EvalRequest) returns (EvalResponse) {}

  /**
   * Calculates the magnetic declination at the given position using the
   * International Geomagnetic Reference Field (IGRF) model. The result is not
   * always exactly the same as what DCS seem to use, but it is very close (DCS
   * doesn't expose its declination).
   */
  rpc GetMagneticDeclination(GetMagneticDeclinationRequest)
      returns (GetMagneticDeclinationResponse) {}

  rpc GetTickets(GetTicketsRequest)
    returns (GetTicketsResponse) {}

  rpc InitializeTickets(InitializeTicketsRequest)
    returns (InitializeTicketsResponse) {}

  rpc OnZoneCaptured(OnZoneCapturedRequest)
    returns (OnZoneCapturedResponse) {}

  rpc IsZoneEmpty(IsZoneEmptyRequest)
    returns (IsZoneEmptyResponse) {}

  rpc SendMessageFromHQ(SendMessageFromHQRequest)
    returns (SendMessageFromHQResponse) {}
}

message RequestMissionAssignmentRequest {
  string unit_name = 1;
  string mission_type = 2;
}

message RequestMissionAssignmentResponse {}

message JoinMissionRequest {
  string unit_name = 1;
  int32 mission_code = 2;
}

message JoinMissionResponse {}

message EvalRequest {
  string lua = 1;
}

message EvalResponse {
  string json = 1;
}

message GetMagneticDeclinationRequest {
  /// Latitude in Decimal Degrees format
  double lat = 1;
  /// Longitude in Decimal Degrees format
  double lon = 2;
  /// Altitude in Meters above Mean Sea Level (MSL)
  double alt = 3;
}

message GetMagneticDeclinationResponse {
  /// Magnetic declination in degrees. A negative value is an westerly
  /// declination, while a positive value is a easterly declination. `True
  /// North` + `declination` = `Magnetic North`
  double declination = 1;
}

message GetTicketsRequest {
}

message GetTicketsResponse {
  int32 red = 1;
  int32 blue = 2;
}

message InitializeTicketsRequest {
  int32 maxRedTickets = 1;
  int32 maxBlueTickets = 2;
}

message InitializeTicketsResponse {
}

message OnZoneCapturedRequest {
  dcs.common.v0.Coalition coalition = 1;
  string zoneName = 2;
  string zoneFriendlyName = 3;
}

message OnZoneCapturedResponse {
}

message IsZoneEmptyRequest {
  string zoneName = 1;
}

message IsZoneEmptyResponse {
  bool empty = 1;
}

message SendMessageFromHQRequest {
  dcs.common.v0.Coalition coalition = 1;
  string text = 2;
}

message SendMessageFromHQResponse {
}